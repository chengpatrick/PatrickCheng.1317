THE TOKENIZER

Tokenizer class:
The tokenizer class is written in java in the Eclipse IDE, so when compling the project please use Eclipse IDE or it might not work (maybe, not 100% sure). 

The way that this tokenizer works is that first the user will enter the file to be tokenized. The tokenizer will then read in the file line by line, read in each token separately and output the program if the token is legal. A successful read in of the file should let the console print the entire program. After reading in the file, an EOF token will be added to the end of the tokens. All of the tokens then are stored in a list. Then the tokens will also be saved as the legal token names of the Core language in token_ID_name (such as "program","iden" for identifier,"num" for unsigned integers). The tokens will also be saved as the id num of legal tokens in token_ID_num (such as 1 for "program", 31 for unsigned integers).
The tokenizer has four main functions, getToken(), skipToken(), intVal() and idName(). So once the token is read, the cursor will be in the 0 position which is the very start of the tokens. If getToken is called at this time, it will return the id number of the very first token which is 1 that corresponds to "program" in most of the cases. In order to move the cursor you can call skipToken(), this will move the cursor to the next token.

When running the java file for the tokenizer, the program will ask for the user to input the file to be read in first. There are some test files in the data folder already such as test1.txt. So to enter the file just type in "data/test1.txt" (without the ""), "data/" is necessary because test1.txt is in the data folder. Then the tokenizer reads in the file line by line first, separate each token and store it in the list. If the token is illegal the tokenizer will stop and output an error message. When each token is taken in, the console will output the token. After the entire file is read in, the program will then ask the user the name for the output file. The output file will be created in the data folder, so all the use have to do is to type the name of the folder followed by ".txt" (Example: output.txt). Then the program will output the sequence of numbers corresponding to the tokens in the console and in the output file.

While implementing the tokenizer, I tested every function after creating them and made sure that they work by feeding them with different inputs. I created 2 test files in the data folder, using both legal and illgal tokens to make sure the tokenizer works (the illegal tokens are now removed). No known bugs remaining at the moment.
